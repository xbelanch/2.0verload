#!/usr/bin/env ruby
require 'rubygems'
require 'fileutils'
require 'open3'
require 'yaml'
require 'erb'

include FileUtils, Open3
alias :pipe :popen3

$here = File.expand_path(File.dirname(__FILE__))
$config = YAML.load_file("#$here/config.yaml")
$latex = File.join($here, 'latex')
$out = "#$here/#{$config['lang']}"
$template = ERB.new(File.read("#$latex/template.tex"))

def book2pdf(&block)

	block.call
	
end


def command_exists?(command)
	ENV['PATH'].split(/:/).map do |path|
		File.executable?("#{path}/#{command}")
	end.inject{|a, b| a || b}
end

def replace(string, &block)
	string.instance_eval do
		alias :s :gsub!
		instance_eval(&block)
	end
	string
end

def verbatim_sanitize(string)
	string.gsub('\\', '{\textbackslash}').
		gsub('~', '{\textasciitilde}').
		gsub(/([\$\#\_\^\%])/, '\\\\' + '\1{}')
end

def pre_pandoc(string)
	replace(string) do
		# Pandoc discards #### subsubsections #### - this hack recovers them
		s /\#\#\#\# (.*?) \#\#\#\#/, 'SUBSUBSECTION: \1'

		# Turns URLs into clickable links
		s /\`(http:\/\/[A-Za-z0-9\/\%\&\=\-\_\\\.]+)\`/, '<\1>'
		s /(\n\n)\t(http:\/\/[A-Za-z0-9\/\%\&\=\-\_\\\.]+)\n([^\t]|\t\n)/,
		'\1<\2>\1'
	end
end

def post_pandoc(string)
	replace(string) do
		space = /\s/
		# Reformat for the book documentclass as opposed to article
		s '\section', '\chap'
		s '\sub', '\\'
		s /SUBSUBSECTION: (.*)/, '\subsubsection{\1}'
	end
end

missing = ['pandoc', 'xelatex'].reject{|command| command_exists?(command)}
unless missing.empty?
	puts "Missing dependencies: #{missing.join(', ')}."
	puts "Install these and try again."
	exit
else
  puts "LaTex & Pandoc OK!"
end

book2pdf do 
  markdown = Dir["#$here/cap*.markdown"].sort.map do |file|
		File.read(file)
	end.join("\n\n")
	
	print "\tParsing markdown... "
	latex = pipe('pandoc -p -f markdown -t latex') do |stdin, stdout|
		stdin.write(pre_pandoc(markdown))
		stdin.close
		post_pandoc(stdout.read)
	end
	puts "done"
	print "\tCreating main.tex for #{$config['lang']}... "
	dir = "#$here/#{$config['lang']}"
	mkdir_p(dir)
  File.open("#{dir}/main.tex", 'w') do |file|
		file.write($template.result(binding))
	end
	puts "done"
  
  abort = false
  $DEBUG = false

	puts "\tRunning XeTeX:"
	cd($here)
	3.times do |i|	
		print "\t\tPass #{i + 1}... "
		pipe("xelatex -output-directory='#{dir}' '#{dir}/main.tex' 2>&1") do |_, stdout|
			unless $DEBUG
				if ~ /^!\s/
					puts "failed with:\n\t\t\t#{$_.strip}"
					puts "\tConsider running this again with --debug."
					abort = true
				end while stdout.gets and not abort
			else
				STDERR.print while stdout.gets rescue abort = true
			end
		end
		break if abort
		puts "done"
	end

	unless abort
		print "\tCopying output to 2.0verload.pdf... "
		cp("#{dir}/main.pdf", "#$here/2.0verload.pdf")
		puts "done"
	end
end
